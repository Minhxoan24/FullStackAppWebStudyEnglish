{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Minh\\\\Desktop\\\\Projcet\\\\Project-E-Leearning\\\\FullStackAppWebStudyEnglish\\\\FrontendWebReactJs\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'https://localhost:5001/api'; // Backend URL\n\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isGuest, setIsGuest] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Load auth state from localStorage on app start\n  useEffect(() => {\n    const accessToken = localStorage.getItem('accessToken');\n    const refreshToken = localStorage.getItem('refreshToken');\n    const storedUser = localStorage.getItem('user');\n    const storedGuest = localStorage.getItem('isGuest');\n    if (accessToken && storedUser) {\n      setIsLoggedIn(true);\n      setUser(JSON.parse(storedUser));\n    } else if (storedGuest === 'true') {\n      setIsGuest(true);\n    }\n    setLoading(false);\n  }, []);\n  const apiCall = async (url, options = {}) => {\n    const accessToken = localStorage.getItem('accessToken');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers\n    };\n    if (accessToken) {\n      headers.Authorization = `Bearer ${accessToken}`;\n    }\n    const response = await fetch(`${API_BASE_URL}${url}`, {\n      ...options,\n      headers\n    });\n    if (response.status === 401) {\n      // Try to refresh token\n      const refreshed = await refreshAccessToken();\n      if (refreshed) {\n        // Retry the call with new token\n        const newToken = localStorage.getItem('accessToken');\n        headers.Authorization = `Bearer ${newToken}`;\n        return fetch(`${API_BASE_URL}${url}`, {\n          ...options,\n          headers\n        });\n      } else {\n        logout();\n        throw new Error('Session expired');\n      }\n    }\n    return response;\n  };\n  const refreshAccessToken = async () => {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (!refreshToken) return false;\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('accessToken', data.accessToken);\n        localStorage.setItem('refreshToken', data.refreshToken);\n        return true;\n      }\n    } catch (error) {\n      console.error('Refresh token failed:', error);\n    }\n    return false;\n  };\n  const register = async userData => {\n    try {\n      const response = await apiCall('/user/auth/register', {\n        method: 'POST',\n        body: JSON.stringify(userData)\n      });\n      if (response.ok) {\n        return {\n          success: true\n        };\n      } else {\n        const error = await response.json();\n        return {\n          success: false,\n          message: error.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error'\n      };\n    }\n  };\n  const login = async credentials => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/user/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('accessToken', data.accessToken);\n        localStorage.setItem('refreshToken', data.refreshToken);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        setIsLoggedIn(true);\n        setIsGuest(false);\n        setUser(data.user);\n        localStorage.removeItem('isGuest');\n        return {\n          success: true\n        };\n      } else {\n        const error = await response.json();\n        return {\n          success: false,\n          message: error.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error'\n      };\n    }\n  };\n  const logout = async () => {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (refreshToken) {\n      try {\n        await apiCall('/auth/logout', {\n          method: 'POST',\n          body: JSON.stringify({\n            refreshToken\n          })\n        });\n      } catch (error) {\n        console.error('Logout API failed:', error);\n      }\n    }\n    setIsLoggedIn(false);\n    setIsGuest(false);\n    setUser(null);\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('user');\n    localStorage.removeItem('isGuest');\n  };\n  const enterAsGuest = () => {\n    setIsGuest(true);\n    setIsLoggedIn(false);\n    setUser(null);\n    localStorage.setItem('isGuest', 'true');\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('user');\n  };\n  const getProfile = async () => {\n    try {\n      const response = await apiCall('/auth/profile');\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data);\n        localStorage.setItem('user', JSON.stringify(data));\n        return {\n          success: true,\n          data\n        };\n      } else {\n        return {\n          success: false\n        };\n      }\n    } catch (error) {\n      return {\n        success: false\n      };\n    }\n  };\n  const updateProfile = async updateData => {\n    try {\n      const response = await apiCall('/auth/profile', {\n        method: 'PUT',\n        body: JSON.stringify(updateData)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data);\n        localStorage.setItem('user', JSON.stringify(data));\n        return {\n          success: true\n        };\n      } else {\n        const error = await response.json();\n        return {\n          success: false,\n          message: error.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error'\n      };\n    }\n  };\n  const changePassword = async passwordData => {\n    try {\n      const response = await apiCall('/auth/change-password', {\n        method: 'POST',\n        body: JSON.stringify(passwordData)\n      });\n      if (response.ok) {\n        return {\n          success: true\n        };\n      } else {\n        const error = await response.json();\n        return {\n          success: false,\n          message: error.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error'\n      };\n    }\n  };\n  const forgotPassword = async email => {\n    try {\n      const response = await apiCall('/auth/forgot-password', {\n        method: 'POST',\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (response.ok) {\n        return {\n          success: true\n        };\n      } else {\n        const error = await response.json();\n        return {\n          success: false,\n          message: error.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error'\n      };\n    }\n  };\n  const value = {\n    isLoggedIn,\n    isGuest,\n    user,\n    loading,\n    login,\n    logout,\n    register,\n    enterAsGuest,\n    getProfile,\n    updateProfile,\n    changePassword,\n    forgotPassword\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"At+KWvWtwdNmvfJgoF5waAuPOas=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isLoggedIn","setIsLoggedIn","isGuest","setIsGuest","user","setUser","loading","setLoading","accessToken","localStorage","getItem","refreshToken","storedUser","storedGuest","JSON","parse","apiCall","url","options","headers","Authorization","response","fetch","status","refreshed","refreshAccessToken","newToken","logout","method","body","stringify","ok","data","json","setItem","error","console","register","userData","success","message","login","credentials","removeItem","enterAsGuest","getProfile","updateProfile","updateData","changePassword","passwordData","forgotPassword","email","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Minh/Desktop/Projcet/Project-E-Leearning/FullStackAppWebStudyEnglish/FrontendWebReactJs/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst API_BASE_URL = 'https://localhost:5001/api'; // Backend URL\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [isGuest, setIsGuest] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Load auth state from localStorage on app start\r\n  useEffect(() => {\r\n    const accessToken = localStorage.getItem('accessToken');\r\n    const refreshToken = localStorage.getItem('refreshToken');\r\n    const storedUser = localStorage.getItem('user');\r\n    const storedGuest = localStorage.getItem('isGuest');\r\n\r\n    if (accessToken && storedUser) {\r\n      setIsLoggedIn(true);\r\n      setUser(JSON.parse(storedUser));\r\n    } else if (storedGuest === 'true') {\r\n      setIsGuest(true);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const apiCall = async (url, options = {}) => {\r\n    const accessToken = localStorage.getItem('accessToken');\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    };\r\n    if (accessToken) {\r\n      headers.Authorization = `Bearer ${accessToken}`;\r\n    }\r\n\r\n    const response = await fetch(`${API_BASE_URL}${url}`, {\r\n      ...options,\r\n      headers,\r\n    });\r\n\r\n    if (response.status === 401) {\r\n      // Try to refresh token\r\n      const refreshed = await refreshAccessToken();\r\n      if (refreshed) {\r\n        // Retry the call with new token\r\n        const newToken = localStorage.getItem('accessToken');\r\n        headers.Authorization = `Bearer ${newToken}`;\r\n        return fetch(`${API_BASE_URL}${url}`, {\r\n          ...options,\r\n          headers,\r\n        });\r\n      } else {\r\n        logout();\r\n        throw new Error('Session expired');\r\n      }\r\n    }\r\n\r\n    return response;\r\n  };\r\n\r\n  const refreshAccessToken = async () => {\r\n    const refreshToken = localStorage.getItem('refreshToken');\r\n    if (!refreshToken) return false;\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/refresh`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ refreshToken }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        localStorage.setItem('accessToken', data.accessToken);\r\n        localStorage.setItem('refreshToken', data.refreshToken);\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('Refresh token failed:', error);\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const response = await apiCall('/user/auth/register', {\r\n        method: 'POST',\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        return { success: true };\r\n      } else {\r\n        const error = await response.json();\r\n        return { success: false, message: error.message };\r\n      }\r\n    } catch (error) {\r\n      return { success: false, message: 'Network error' };\r\n    }\r\n  };\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/user/auth/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(credentials),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        localStorage.setItem('accessToken', data.accessToken);\r\n        localStorage.setItem('refreshToken', data.refreshToken);\r\n        localStorage.setItem('user', JSON.stringify(data.user));\r\n        setIsLoggedIn(true);\r\n        setIsGuest(false);\r\n        setUser(data.user);\r\n        localStorage.removeItem('isGuest');\r\n        return { success: true };\r\n      } else {\r\n        const error = await response.json();\r\n        return { success: false, message: error.message };\r\n      }\r\n    } catch (error) {\r\n      return { success: false, message: 'Network error' };\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    const refreshToken = localStorage.getItem('refreshToken');\r\n    if (refreshToken) {\r\n      try {\r\n        await apiCall('/auth/logout', {\r\n          method: 'POST',\r\n          body: JSON.stringify({ refreshToken }),\r\n        });\r\n      } catch (error) {\r\n        console.error('Logout API failed:', error);\r\n      }\r\n    }\r\n\r\n    setIsLoggedIn(false);\r\n    setIsGuest(false);\r\n    setUser(null);\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('refreshToken');\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('isGuest');\r\n  };\r\n\r\n  const enterAsGuest = () => {\r\n    setIsGuest(true);\r\n    setIsLoggedIn(false);\r\n    setUser(null);\r\n    localStorage.setItem('isGuest', 'true');\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('refreshToken');\r\n    localStorage.removeItem('isLoggedIn');\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  const getProfile = async () => {\r\n    try {\r\n      const response = await apiCall('/auth/profile');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setUser(data);\r\n        localStorage.setItem('user', JSON.stringify(data));\r\n        return { success: true, data };\r\n      } else {\r\n        return { success: false };\r\n      }\r\n    } catch (error) {\r\n      return { success: false };\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (updateData) => {\r\n    try {\r\n      const response = await apiCall('/auth/profile', {\r\n        method: 'PUT',\r\n        body: JSON.stringify(updateData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setUser(data);\r\n        localStorage.setItem('user', JSON.stringify(data));\r\n        return { success: true };\r\n      } else {\r\n        const error = await response.json();\r\n        return { success: false, message: error.message };\r\n      }\r\n    } catch (error) {\r\n      return { success: false, message: 'Network error' };\r\n    }\r\n  };\r\n\r\n  const changePassword = async (passwordData) => {\r\n    try {\r\n      const response = await apiCall('/auth/change-password', {\r\n        method: 'POST',\r\n        body: JSON.stringify(passwordData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        return { success: true };\r\n      } else {\r\n        const error = await response.json();\r\n        return { success: false, message: error.message };\r\n      }\r\n    } catch (error) {\r\n      return { success: false, message: 'Network error' };\r\n    }\r\n  };\r\n\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      const response = await apiCall('/auth/forgot-password', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ email }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        return { success: true };\r\n      } else {\r\n        const error = await response.json();\r\n        return { success: false, message: error.message };\r\n      }\r\n    } catch (error) {\r\n      return { success: false, message: 'Network error' };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    isLoggedIn,\r\n    isGuest,\r\n    user,\r\n    loading,\r\n    login,\r\n    logout,\r\n    register,\r\n    enterAsGuest,\r\n    getProfile,\r\n    updateProfile,\r\n    changePassword,\r\n    forgotPassword,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}