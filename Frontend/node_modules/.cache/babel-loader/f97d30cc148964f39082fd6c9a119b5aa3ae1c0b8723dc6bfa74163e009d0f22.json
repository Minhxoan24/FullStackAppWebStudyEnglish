{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\APP English\\\\FullStackWebStudyEnglish\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(null);\n\n  // Load auth state from localStorage on app start\n  useEffect(() => {\n    const storedAuth = localStorage.getItem('isLoggedIn');\n    const storedUser = localStorage.getItem('user');\n    if (storedAuth === 'true' && storedUser) {\n      setIsLoggedIn(true);\n      setUser(JSON.parse(storedUser));\n    }\n  }, []);\n  const login = userData => {\n    setIsLoggedIn(true);\n    setUser(userData);\n    localStorage.setItem('isLoggedIn', 'true');\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n  const logout = () => {\n    setIsLoggedIn(false);\n    setUser(null);\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('user');\n  };\n  const register = userData => {\n    // Save user data for future login\n    localStorage.setItem('registeredUser', JSON.stringify(userData));\n    return true; // Registration successful\n  };\n  const value = {\n    isLoggedIn,\n    user,\n    login,\n    logout,\n    register\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"Ki3p4Ug0OIeovJYgYQgFusbAAO4=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isLoggedIn","setIsLoggedIn","user","setUser","storedAuth","localStorage","getItem","storedUser","JSON","parse","login","userData","setItem","stringify","logout","removeItem","register","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/APP English/FullStackWebStudyEnglish/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n\r\n  // Load auth state from localStorage on app start\r\n  useEffect(() => {\r\n    const storedAuth = localStorage.getItem('isLoggedIn');\r\n    const storedUser = localStorage.getItem('user');\r\n    \r\n    if (storedAuth === 'true' && storedUser) {\r\n      setIsLoggedIn(true);\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n  }, []);\r\n\r\n  const login = (userData) => {\r\n    setIsLoggedIn(true);\r\n    setUser(userData);\r\n    localStorage.setItem('isLoggedIn', 'true');\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n  };\r\n\r\n  const logout = () => {\r\n    setIsLoggedIn(false);\r\n    setUser(null);\r\n    localStorage.removeItem('isLoggedIn');\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  const register = (userData) => {\r\n    // Save user data for future login\r\n    localStorage.setItem('registeredUser', JSON.stringify(userData));\r\n    return true; // Registration successful\r\n  };\r\n\r\n  const value = {\r\n    isLoggedIn,\r\n    user,\r\n    login,\r\n    logout,\r\n    register\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGR,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMe,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACrD,MAAMC,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAE/C,IAAIF,UAAU,KAAK,MAAM,IAAIG,UAAU,EAAE;MACvCN,aAAa,CAAC,IAAI,CAAC;MACnBE,OAAO,CAACK,IAAI,CAACC,KAAK,CAACF,UAAU,CAAC,CAAC;IACjC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,KAAK,GAAIC,QAAQ,IAAK;IAC1BV,aAAa,CAAC,IAAI,CAAC;IACnBE,OAAO,CAACQ,QAAQ,CAAC;IACjBN,YAAY,CAACO,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;IAC1CP,YAAY,CAACO,OAAO,CAAC,MAAM,EAAEJ,IAAI,CAACK,SAAS,CAACF,QAAQ,CAAC,CAAC;EACxD,CAAC;EAED,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnBb,aAAa,CAAC,KAAK,CAAC;IACpBE,OAAO,CAAC,IAAI,CAAC;IACbE,YAAY,CAACU,UAAU,CAAC,YAAY,CAAC;IACrCV,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED,MAAMC,QAAQ,GAAIL,QAAQ,IAAK;IAC7B;IACAN,YAAY,CAACO,OAAO,CAAC,gBAAgB,EAAEJ,IAAI,CAACK,SAAS,CAACF,QAAQ,CAAC,CAAC;IAChE,OAAO,IAAI,CAAC,CAAC;EACf,CAAC;EAED,MAAMM,KAAK,GAAG;IACZjB,UAAU;IACVE,IAAI;IACJQ,KAAK;IACLI,MAAM;IACNE;EACF,CAAC;EAED,oBACEzB,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAnB,QAAA,EAChCA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACvB,GAAA,CAhDWF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}