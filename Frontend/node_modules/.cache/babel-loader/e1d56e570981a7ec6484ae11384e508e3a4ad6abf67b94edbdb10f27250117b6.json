{"ast":null,"code":"// API configuration and base setup\nconst BASE_URL = 'http://localhost:5029/api';\n\n// API Endpoints\nconst API_ENDPOINTS = {\n  AUTH: {\n    REGISTER: 'user/auth/register',\n    LOGIN: 'user/auth/login',\n    PROFILE: 'user/auth/profile',\n    UPDATE_PROFILE: 'user/auth/profile',\n    CHANGE_PASSWORD: 'user/auth/change-password',\n    FORGOT_PASSWORD: 'user/auth/forgot-password',\n    RESET_PASSWORD: 'user/auth/reset-password'\n  }\n};\n\n// Token management\nexport const TokenManager = {\n  getAccessToken: () => localStorage.getItem('accessToken'),\n  getRefreshToken: () => localStorage.getItem('refreshToken'),\n  setTokens: (accessToken, refreshToken) => {\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n  },\n  clearTokens: () => {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('user');\n  },\n  isTokenExpired: token => {\n    if (!token) return true;\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp * 1000 < Date.now();\n    } catch {\n      return true;\n    }\n  }\n};\n\n// HTTP Client with automatic token handling\nexport const httpClient = {\n  async request(url, options = {}) {\n    const token = TokenManager.getAccessToken();\n    console.log('HTTP Request:', {\n      url: `${BASE_URL}/${url}`,\n      method: options.method || 'GET',\n      hasToken: !!token,\n      tokenPreview: token ? `${token.substring(0, 50)}...` : 'No token'\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(token && {\n          'Authorization': `Bearer ${token}`\n        }),\n        ...options.headers\n      },\n      ...options\n    };\n    if (config.body && typeof config.body === 'object') {\n      config.body = JSON.stringify(config.body);\n    }\n    try {\n      const response = await fetch(`${BASE_URL}/${url}`, config);\n      console.log('HTTP Response:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url\n      });\n\n      // Handle different response types\n      const contentType = response.headers.get('content-type');\n      let data;\n      if (contentType && contentType.includes('application/json')) {\n        data = await response.json();\n      } else {\n        data = await response.text();\n      }\n      if (!response.ok) {\n        console.error('HTTP Error Response:', {\n          status: response.status,\n          data: data\n        });\n\n        // Handle 401 Unauthorized\n        if (response.status === 401) {\n          console.log('401 Unauthorized - clearing tokens and redirecting to login');\n          TokenManager.clearTokens();\n          window.location.href = '/login';\n          throw new Error('Session expired. Please login again.');\n        }\n        throw new Error(data.message || data || `HTTP error! status: ${response.status}`);\n      }\n\n      // Return success format\n      return {\n        success: true,\n        data: data,\n        status: response.status\n      };\n    } catch (error) {\n      console.error('HTTP Request failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  get(url, options = {}) {\n    return this.request(url, {\n      ...options,\n      method: 'GET'\n    });\n  },\n  post(url, data, options = {}) {\n    return this.request(url, {\n      ...options,\n      method: 'POST',\n      body: data\n    });\n  },\n  put(url, data, options = {}) {\n    return this.request(url, {\n      ...options,\n      method: 'PUT',\n      body: data\n    });\n  },\n  delete(url, options = {}) {\n    return this.request(url, {\n      ...options,\n      method: 'DELETE'\n    });\n  }\n};\n\n// Authentication API methods\nexport const AuthAPI = {\n  // Register user\n  register: async userData => {\n    try {\n      const registerData = {\n        sureName: userData.firstName,\n        lastName: userData.lastName,\n        email: userData.email,\n        password: userData.password,\n        phoneNumber: userData.phoneNumber\n      };\n      const result = await httpClient.post(API_ENDPOINTS.AUTH.REGISTER, registerData);\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Login user\n  login: async credentials => {\n    try {\n      const result = await httpClient.post(API_ENDPOINTS.AUTH.LOGIN, credentials);\n      if (result.success && result.data) {\n        // Store tokens and user data\n        TokenManager.setTokens(result.data.accessToken, result.data.refreshToken);\n        localStorage.setItem('user', JSON.stringify(result.data.user));\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Logout user\n  logout: () => {\n    TokenManager.clearTokens();\n  },\n  // Get user profile\n  getProfile: async () => {\n    try {\n      return await httpClient.get(API_ENDPOINTS.AUTH.PROFILE);\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Update user profile\n  updateProfile: async profileData => {\n    try {\n      const updateData = {\n        sureName: profileData.firstName,\n        lastName: profileData.lastName,\n        phoneNumber: profileData.phoneNumber\n      };\n      const result = await httpClient.put(API_ENDPOINTS.AUTH.UPDATE_PROFILE, updateData);\n      if (result.success && result.data) {\n        // Update stored user data\n        localStorage.setItem('user', JSON.stringify(result.data));\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Change password\n  changePassword: async passwordData => {\n    try {\n      return await httpClient.put(API_ENDPOINTS.AUTH.CHANGE_PASSWORD, passwordData);\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Forgot password\n  forgotPassword: async email => {\n    try {\n      return await httpClient.post(API_ENDPOINTS.AUTH.FORGOT_PASSWORD, {\n        email\n      });\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Reset password with OTP\n  resetPassword: async resetData => {\n    try {\n      // resetData should contain: { email, otpCode, newPassword }\n      return await httpClient.post(API_ENDPOINTS.AUTH.RESET_PASSWORD, resetData);\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n};\nexport default AuthAPI;","map":{"version":3,"names":["BASE_URL","API_ENDPOINTS","AUTH","REGISTER","LOGIN","PROFILE","UPDATE_PROFILE","CHANGE_PASSWORD","FORGOT_PASSWORD","RESET_PASSWORD","TokenManager","getAccessToken","localStorage","getItem","getRefreshToken","setTokens","accessToken","refreshToken","setItem","clearTokens","removeItem","isTokenExpired","token","payload","JSON","parse","atob","split","exp","Date","now","httpClient","request","url","options","console","log","method","hasToken","tokenPreview","substring","config","headers","body","stringify","response","fetch","status","statusText","contentType","get","data","includes","json","text","ok","error","window","location","href","Error","message","success","post","put","delete","AuthAPI","register","userData","registerData","sureName","firstName","lastName","email","password","phoneNumber","result","login","credentials","user","logout","getProfile","updateProfile","profileData","updateData","changePassword","passwordData","forgotPassword","resetPassword","resetData"],"sources":["C:/Users/Admin/Desktop/demo app english/FullStackAppWebStudyEnglish/Frontend/src/services/api.js"],"sourcesContent":["// API configuration and base setup\r\nconst BASE_URL = 'http://localhost:5029/api';\r\n\r\n// API Endpoints\r\nconst API_ENDPOINTS = {\r\n  AUTH: {\r\n    REGISTER: 'user/auth/register',\r\n    LOGIN: 'user/auth/login',\r\n    PROFILE: 'user/auth/profile',\r\n    UPDATE_PROFILE: 'user/auth/profile',\r\n    CHANGE_PASSWORD: 'user/auth/change-password',\r\n    FORGOT_PASSWORD: 'user/auth/forgot-password',\r\n    RESET_PASSWORD: 'user/auth/reset-password'\r\n  }\r\n};\r\n\r\n// Token management\r\nexport const TokenManager = {\r\n  getAccessToken: () => localStorage.getItem('accessToken'),\r\n  getRefreshToken: () => localStorage.getItem('refreshToken'),\r\n  setTokens: (accessToken, refreshToken) => {\r\n    localStorage.setItem('accessToken', accessToken);\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n  },\r\n  clearTokens: () => {\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('refreshToken');\r\n    localStorage.removeItem('user');\r\n  },\r\n  isTokenExpired: (token) => {\r\n    if (!token) return true;\r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      return payload.exp * 1000 < Date.now();\r\n    } catch {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n\r\n// HTTP Client with automatic token handling\r\nexport const httpClient = {\r\n  async request(url, options = {}) {\r\n    const token = TokenManager.getAccessToken();\r\n    console.log('HTTP Request:', {\r\n      url: `${BASE_URL}/${url}`,\r\n      method: options.method || 'GET',\r\n      hasToken: !!token,\r\n      tokenPreview: token ? `${token.substring(0, 50)}...` : 'No token'\r\n    });\r\n    \r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        ...options.headers\r\n      },\r\n      ...options\r\n    };\r\n\r\n    if (config.body && typeof config.body === 'object') {\r\n      config.body = JSON.stringify(config.body);\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/${url}`, config);\r\n      \r\n      console.log('HTTP Response:', {\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        url: response.url\r\n      });\r\n      \r\n      // Handle different response types\r\n      const contentType = response.headers.get('content-type');\r\n      let data;\r\n      \r\n      if (contentType && contentType.includes('application/json')) {\r\n        data = await response.json();\r\n      } else {\r\n        data = await response.text();\r\n      }\r\n\r\n      if (!response.ok) {\r\n        console.error('HTTP Error Response:', {\r\n          status: response.status,\r\n          data: data\r\n        });\r\n        \r\n        // Handle 401 Unauthorized\r\n        if (response.status === 401) {\r\n          console.log('401 Unauthorized - clearing tokens and redirecting to login');\r\n          TokenManager.clearTokens();\r\n          window.location.href = '/login';\r\n          throw new Error('Session expired. Please login again.');\r\n        }\r\n        \r\n        throw new Error(data.message || data || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Return success format\r\n      return {\r\n        success: true,\r\n        data: data,\r\n        status: response.status\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('HTTP Request failed:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  },\r\n\r\n  get(url, options = {}) {\r\n    return this.request(url, { ...options, method: 'GET' });\r\n  },\r\n\r\n  post(url, data, options = {}) {\r\n    return this.request(url, { ...options, method: 'POST', body: data });\r\n  },\r\n\r\n  put(url, data, options = {}) {\r\n    return this.request(url, { ...options, method: 'PUT', body: data });\r\n  },\r\n\r\n  delete(url, options = {}) {\r\n    return this.request(url, { ...options, method: 'DELETE' });\r\n  }\r\n};\r\n\r\n// Authentication API methods\r\nexport const AuthAPI = {\r\n  // Register user\r\n  register: async (userData) => {\r\n    try {\r\n      const registerData = {\r\n        sureName: userData.firstName,\r\n        lastName: userData.lastName,\r\n        email: userData.email,\r\n        password: userData.password,\r\n        phoneNumber: userData.phoneNumber\r\n      };\r\n\r\n      const result = await httpClient.post(API_ENDPOINTS.AUTH.REGISTER, registerData);\r\n      return result;\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Login user\r\n  login: async (credentials) => {\r\n    try {\r\n      const result = await httpClient.post(API_ENDPOINTS.AUTH.LOGIN, credentials);\r\n      \r\n      if (result.success && result.data) {\r\n        // Store tokens and user data\r\n        TokenManager.setTokens(result.data.accessToken, result.data.refreshToken);\r\n        localStorage.setItem('user', JSON.stringify(result.data.user));\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Logout user\r\n  logout: () => {\r\n    TokenManager.clearTokens();\r\n  },\r\n\r\n  // Get user profile\r\n  getProfile: async () => {\r\n    try {\r\n      return await httpClient.get(API_ENDPOINTS.AUTH.PROFILE);\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Update user profile\r\n  updateProfile: async (profileData) => {\r\n    try {\r\n      const updateData = {\r\n        sureName: profileData.firstName,\r\n        lastName: profileData.lastName,\r\n        phoneNumber: profileData.phoneNumber\r\n      };\r\n\r\n      const result = await httpClient.put(API_ENDPOINTS.AUTH.UPDATE_PROFILE, updateData);\r\n      \r\n      if (result.success && result.data) {\r\n        // Update stored user data\r\n        localStorage.setItem('user', JSON.stringify(result.data));\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Change password\r\n  changePassword: async (passwordData) => {\r\n    try {\r\n      return await httpClient.put(API_ENDPOINTS.AUTH.CHANGE_PASSWORD, passwordData);\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Forgot password\r\n  forgotPassword: async (email) => {\r\n    try {\r\n      return await httpClient.post(API_ENDPOINTS.AUTH.FORGOT_PASSWORD, { email });\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Reset password with OTP\r\n  resetPassword: async (resetData) => {\r\n    try {\r\n      // resetData should contain: { email, otpCode, newPassword }\r\n      return await httpClient.post(API_ENDPOINTS.AUTH.RESET_PASSWORD, resetData);\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n};\r\n\r\nexport default AuthAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}