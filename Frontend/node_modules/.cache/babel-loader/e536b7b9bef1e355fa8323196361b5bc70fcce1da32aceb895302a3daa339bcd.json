{"ast":null,"code":"// API configuration and base setup\nconst API_BASE_URL = 'https://localhost:7196/api'; // Adjust port based on your backend\nconst API_ENDPOINTS = {\n  AUTH: {\n    REGISTER: '/user/auth/register',\n    LOGIN: '/user/auth/login',\n    PROFILE: '/user/auth/profile',\n    UPDATE_PROFILE: '/user/auth/profile',\n    CHANGE_PASSWORD: '/user/auth/change-password',\n    FORGOT_PASSWORD: '/user/auth/forgot-password',\n    RESET_PASSWORD: '/user/auth/reset-password'\n  }\n};\n\n// Token management\nexport const TokenManager = {\n  getAccessToken: () => localStorage.getItem('accessToken'),\n  getRefreshToken: () => localStorage.getItem('refreshToken'),\n  setTokens: (accessToken, refreshToken) => {\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n  },\n  clearTokens: () => {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('user');\n  },\n  isTokenExpired: token => {\n    if (!token) return true;\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp * 1000 < Date.now();\n    } catch {\n      return true;\n    }\n  }\n};\n\n// HTTP client with interceptors\nclass HttpClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const accessToken = TokenManager.getAccessToken();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n\n    // Add Authorization header if token exists and not expired\n    if (accessToken && !TokenManager.isTokenExpired(accessToken)) {\n      config.headers.Authorization = `Bearer ${accessToken}`;\n    }\n    try {\n      const response = await fetch(url, config);\n\n      // Handle token expiration\n      if (response.status === 401) {\n        TokenManager.clearTokens();\n        // Redirect to login or trigger re-authentication\n        window.location.href = '/login';\n        throw new Error('Token expired. Please login again.');\n      }\n\n      // Parse JSON response\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\n      }\n      return {\n        success: true,\n        data\n      };\n    } catch (error) {\n      console.error('API request failed:', error);\n      return {\n        success: false,\n        error: error.message || 'Network error occurred'\n      };\n    }\n  }\n  get(endpoint, options = {}) {\n    return this.request(endpoint, {\n      method: 'GET',\n      ...options\n    });\n  }\n  post(endpoint, data, options = {}) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      ...options\n    });\n  }\n  put(endpoint, data, options = {}) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n      ...options\n    });\n  }\n  delete(endpoint, options = {}) {\n    return this.request(endpoint, {\n      method: 'DELETE',\n      ...options\n    });\n  }\n}\n\n// Create HTTP client instance\nconst httpClient = new HttpClient(API_BASE_URL);\n\n// Auth API services\nexport const AuthAPI = {\n  // Register new user\n  register: async userData => {\n    try {\n      const registerData = {\n        sureName: userData.firstName,\n        lastName: userData.lastName,\n        email: userData.email,\n        password: userData.password,\n        phoneNumber: userData.phoneNumber\n      };\n      const result = await httpClient.post(API_ENDPOINTS.AUTH.REGISTER, registerData);\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Login user\n  login: async credentials => {\n    try {\n      const result = await httpClient.post(API_ENDPOINTS.AUTH.LOGIN, credentials);\n      if (result.success && result.data) {\n        // Store tokens and user data\n        TokenManager.setTokens(result.data.accessToken, result.data.refreshToken);\n        localStorage.setItem('user', JSON.stringify(result.data.user));\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Get user profile\n  getProfile: async () => {\n    try {\n      return await httpClient.get(API_ENDPOINTS.AUTH.PROFILE);\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Update user profile\n  updateProfile: async profileData => {\n    try {\n      const updateData = {\n        sureName: profileData.firstName,\n        lastName: profileData.lastName,\n        phoneNumber: profileData.phoneNumber\n      };\n      const result = await httpClient.put(API_ENDPOINTS.AUTH.UPDATE_PROFILE, updateData);\n      if (result.success && result.data) {\n        // Update stored user data\n        localStorage.setItem('user', JSON.stringify(result.data));\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Change password\n  changePassword: async passwordData => {\n    try {\n      return await httpClient.put(API_ENDPOINTS.AUTH.CHANGE_PASSWORD, passwordData);\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Forgot password\n  forgotPassword: async email => {\n    try {\n      return await httpClient.post(API_ENDPOINTS.AUTH.FORGOT_PASSWORD, {\n        email\n      });\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Reset password\n  resetPassword: async resetData => {\n    try {\n      return await httpClient.post(API_ENDPOINTS.AUTH.RESET_PASSWORD, resetData);\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Logout (client-side cleanup)\n  logout: () => {\n    TokenManager.clearTokens();\n    return {\n      success: true\n    };\n  }\n};\n\n// Export everything\nexport default httpClient;","map":{"version":3,"names":["API_BASE_URL","API_ENDPOINTS","AUTH","REGISTER","LOGIN","PROFILE","UPDATE_PROFILE","CHANGE_PASSWORD","FORGOT_PASSWORD","RESET_PASSWORD","TokenManager","getAccessToken","localStorage","getItem","getRefreshToken","setTokens","accessToken","refreshToken","setItem","clearTokens","removeItem","isTokenExpired","token","payload","JSON","parse","atob","split","exp","Date","now","HttpClient","constructor","baseURL","request","endpoint","options","url","config","headers","Authorization","response","fetch","status","window","location","href","Error","data","json","ok","message","success","error","console","get","method","post","body","stringify","put","delete","httpClient","AuthAPI","register","userData","registerData","sureName","firstName","lastName","email","password","phoneNumber","result","login","credentials","user","getProfile","updateProfile","profileData","updateData","changePassword","passwordData","forgotPassword","resetPassword","resetData","logout"],"sources":["C:/Users/Admin/Desktop/demo app english/FullStackAppWebStudyEnglish/Frontend/src/services/api.js"],"sourcesContent":["// API configuration and base setup\r\nconst API_BASE_URL = 'https://localhost:7196/api'; // Adjust port based on your backend\r\nconst API_ENDPOINTS = {\r\n  AUTH: {\r\n    REGISTER: '/user/auth/register',\r\n    LOGIN: '/user/auth/login',\r\n    PROFILE: '/user/auth/profile',\r\n    UPDATE_PROFILE: '/user/auth/profile',\r\n    CHANGE_PASSWORD: '/user/auth/change-password',\r\n    FORGOT_PASSWORD: '/user/auth/forgot-password',\r\n    RESET_PASSWORD: '/user/auth/reset-password'\r\n  }\r\n};\r\n\r\n// Token management\r\nexport const TokenManager = {\r\n  getAccessToken: () => localStorage.getItem('accessToken'),\r\n  getRefreshToken: () => localStorage.getItem('refreshToken'),\r\n  setTokens: (accessToken, refreshToken) => {\r\n    localStorage.setItem('accessToken', accessToken);\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n  },\r\n  clearTokens: () => {\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('refreshToken');\r\n    localStorage.removeItem('user');\r\n  },\r\n  isTokenExpired: (token) => {\r\n    if (!token) return true;\r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      return payload.exp * 1000 < Date.now();\r\n    } catch {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n\r\n// HTTP client with interceptors\r\nclass HttpClient {\r\n  constructor(baseURL) {\r\n    this.baseURL = baseURL;\r\n  }\r\n\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    const accessToken = TokenManager.getAccessToken();\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers\r\n      },\r\n      ...options\r\n    };\r\n\r\n    // Add Authorization header if token exists and not expired\r\n    if (accessToken && !TokenManager.isTokenExpired(accessToken)) {\r\n      config.headers.Authorization = `Bearer ${accessToken}`;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      \r\n      // Handle token expiration\r\n      if (response.status === 401) {\r\n        TokenManager.clearTokens();\r\n        // Redirect to login or trigger re-authentication\r\n        window.location.href = '/login';\r\n        throw new Error('Token expired. Please login again.');\r\n      }\r\n\r\n      // Parse JSON response\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return { success: true, data };\r\n    } catch (error) {\r\n      console.error('API request failed:', error);\r\n      return { \r\n        success: false, \r\n        error: error.message || 'Network error occurred' \r\n      };\r\n    }\r\n  }\r\n\r\n  get(endpoint, options = {}) {\r\n    return this.request(endpoint, { method: 'GET', ...options });\r\n  }\r\n\r\n  post(endpoint, data, options = {}) {\r\n    return this.request(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      ...options\r\n    });\r\n  }\r\n\r\n  put(endpoint, data, options = {}) {\r\n    return this.request(endpoint, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(data),\r\n      ...options\r\n    });\r\n  }\r\n\r\n  delete(endpoint, options = {}) {\r\n    return this.request(endpoint, { method: 'DELETE', ...options });\r\n  }\r\n}\r\n\r\n// Create HTTP client instance\r\nconst httpClient = new HttpClient(API_BASE_URL);\r\n\r\n// Auth API services\r\nexport const AuthAPI = {\r\n  // Register new user\r\n  register: async (userData) => {\r\n    try {\r\n      const registerData = {\r\n        sureName: userData.firstName,\r\n        lastName: userData.lastName,\r\n        email: userData.email,\r\n        password: userData.password,\r\n        phoneNumber: userData.phoneNumber\r\n      };\r\n\r\n      const result = await httpClient.post(API_ENDPOINTS.AUTH.REGISTER, registerData);\r\n      return result;\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Login user\r\n  login: async (credentials) => {\r\n    try {\r\n      const result = await httpClient.post(API_ENDPOINTS.AUTH.LOGIN, credentials);\r\n      \r\n      if (result.success && result.data) {\r\n        // Store tokens and user data\r\n        TokenManager.setTokens(result.data.accessToken, result.data.refreshToken);\r\n        localStorage.setItem('user', JSON.stringify(result.data.user));\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Get user profile\r\n  getProfile: async () => {\r\n    try {\r\n      return await httpClient.get(API_ENDPOINTS.AUTH.PROFILE);\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Update user profile\r\n  updateProfile: async (profileData) => {\r\n    try {\r\n      const updateData = {\r\n        sureName: profileData.firstName,\r\n        lastName: profileData.lastName,\r\n        phoneNumber: profileData.phoneNumber\r\n      };\r\n\r\n      const result = await httpClient.put(API_ENDPOINTS.AUTH.UPDATE_PROFILE, updateData);\r\n      \r\n      if (result.success && result.data) {\r\n        // Update stored user data\r\n        localStorage.setItem('user', JSON.stringify(result.data));\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Change password\r\n  changePassword: async (passwordData) => {\r\n    try {\r\n      return await httpClient.put(API_ENDPOINTS.AUTH.CHANGE_PASSWORD, passwordData);\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Forgot password\r\n  forgotPassword: async (email) => {\r\n    try {\r\n      return await httpClient.post(API_ENDPOINTS.AUTH.FORGOT_PASSWORD, { email });\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Reset password\r\n  resetPassword: async (resetData) => {\r\n    try {\r\n      return await httpClient.post(API_ENDPOINTS.AUTH.RESET_PASSWORD, resetData);\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Logout (client-side cleanup)\r\n  logout: () => {\r\n    TokenManager.clearTokens();\r\n    return { success: true };\r\n  }\r\n};\r\n\r\n// Export everything\r\nexport default httpClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}