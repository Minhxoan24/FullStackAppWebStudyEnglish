{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\demo app english\\\\FullStackAppWebStudyEnglish\\\\Frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { AuthAPI, TokenManager } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isGuest, setIsGuest] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize auth state from tokens\n  useEffect(() => {\n    const initializeAuth = async () => {\n      setLoading(true);\n      try {\n        const accessToken = TokenManager.getAccessToken();\n        const storedUser = localStorage.getItem('user');\n        if (accessToken && !TokenManager.isTokenExpired(accessToken) && storedUser) {\n          // Token exists and is valid, get fresh profile data\n          const profileResult = await AuthAPI.getProfile();\n          if (profileResult.success) {\n            setUser(profileResult.data);\n            setIsLoggedIn(true);\n            localStorage.setItem('user', JSON.stringify(profileResult.data));\n          } else {\n            // Token might be invalid, clear everything\n            TokenManager.clearTokens();\n            setUser(null);\n            setIsLoggedIn(false);\n          }\n        } else {\n          // No valid token, check for guest mode\n          const storedGuest = localStorage.getItem('isGuest');\n          if (storedGuest === 'true') {\n            setIsGuest(true);\n          }\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        TokenManager.clearTokens();\n        setUser(null);\n        setIsLoggedIn(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const clearError = () => setError(null);\n  const login = async credentials => {\n    try {\n      clearError();\n      if (!credentials || !credentials.email || !credentials.password) {\n        throw new Error('Vui lòng điền đầy đủ email và mật khẩu');\n      }\n      const result = await AuthAPI.login(credentials);\n      if (result.success) {\n        setIsLoggedIn(true);\n        setIsGuest(false);\n        setUser(result.data.user);\n        localStorage.removeItem('isGuest');\n        return {\n          success: true,\n          user: result.data.user\n        };\n      } else {\n        throw new Error(result.error || 'Đăng nhập thất bại');\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Có lỗi xảy ra khi đăng nhập';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const logout = () => {\n    try {\n      clearError();\n      AuthAPI.logout(); // This clears tokens\n      setIsLoggedIn(false);\n      setIsGuest(false);\n      setUser(null);\n      localStorage.removeItem('isGuest');\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Error during logout:', err);\n      setError('Có lỗi khi đăng xuất');\n      return {\n        success: false,\n        error: 'Có lỗi khi đăng xuất'\n      };\n    }\n  };\n  const enterAsGuest = () => {\n    try {\n      clearError();\n      setIsGuest(true);\n      setIsLoggedIn(false);\n      setUser(null);\n      localStorage.setItem('isGuest', 'true');\n      localStorage.removeItem('isLoggedIn');\n      localStorage.removeItem('user');\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Error entering as guest:', err);\n      setError('Có lỗi khi vào chế độ khách');\n      return {\n        success: false,\n        error: 'Có lỗi khi vào chế độ khách'\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      clearError();\n\n      // Validation\n      if (!userData || !userData.email || !userData.password || !userData.firstName || !userData.lastName) {\n        throw new Error('Vui lòng điền đầy đủ thông tin');\n      }\n      if (userData.password.length < 6) {\n        throw new Error('Mật khẩu phải có ít nhất 6 ký tự');\n      }\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(userData.email)) {\n        throw new Error('Email không hợp lệ');\n      }\n      const result = await AuthAPI.register(userData);\n      if (result.success) {\n        return {\n          success: true,\n          message: 'Đăng ký thành công! Vui lòng đăng nhập.'\n        };\n      } else {\n        throw new Error(result.error || 'Đăng ký thất bại');\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Có lỗi xảy ra khi đăng ký';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const updateProfile = async updateData => {\n    try {\n      clearError();\n      console.log('AuthContext updateProfile called with:', updateData);\n\n      // Validation\n      if (!updateData || !updateData.firstName || !updateData.lastName) {\n        throw new Error('Vui lòng điền đầy đủ thông tin');\n      }\n\n      // Update profile information first\n      console.log('Updating profile...');\n      const result = await AuthAPI.updateProfile(updateData);\n      console.log('Profile update result:', result);\n      if (result.success) {\n        setUser(result.data);\n        return {\n          success: true\n        };\n      } else {\n        throw new Error(result.error || 'Cập nhật thất bại');\n      }\n    } catch (err) {\n      console.error('Update profile error in AuthContext:', err);\n      const errorMessage = err.message || 'Có lỗi xảy ra khi cập nhật thông tin';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const changePassword = async passwordData => {\n    try {\n      clearError();\n      console.log('AuthContext changePassword called');\n      if (!passwordData.currentPassword || !passwordData.newPassword) {\n        throw new Error('Vui lòng điền đầy đủ thông tin mật khẩu');\n      }\n      const result = await AuthAPI.changePassword(passwordData);\n      console.log('Change password result:', result);\n      if (result.success) {\n        // Password changed successfully, but tokens are now invalid\n        // Force logout and redirect to login\n        TokenManager.clearTokens();\n        setIsLoggedIn(false);\n        setUser(null);\n        return {\n          success: true,\n          message: 'Đổi mật khẩu thành công! Vui lòng đăng nhập lại.',\n          requireRelogin: true\n        };\n      } else {\n        throw new Error(result.error || 'Không thể đổi mật khẩu');\n      }\n    } catch (err) {\n      console.error('Change password error in AuthContext:', err);\n      const errorMessage = err.message || 'Có lỗi xảy ra khi đổi mật khẩu';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const sendPasswordResetEmail = async email => {\n    try {\n      clearError();\n      console.log('AuthContext sendPasswordResetEmail called with:', email);\n      if (!email) {\n        throw new Error('Vui lòng nhập email');\n      }\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        throw new Error('Email không hợp lệ');\n      }\n      console.log('Calling AuthAPI.forgotPassword...');\n      const result = await AuthAPI.forgotPassword(email);\n      console.log('Forgot password result:', result);\n      return result;\n    } catch (err) {\n      console.error('Send password reset email error in AuthContext:', err);\n      const errorMessage = err.message || 'Có lỗi xảy ra khi gửi email';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const validateResetToken = async (token, email) => {\n    try {\n      clearError();\n      if (!token || !email) {\n        throw new Error('Token hoặc email không hợp lệ');\n      }\n\n      // For now, we'll just return success\n      // Backend will validate when actually resetting password\n      return {\n        success: true\n      };\n    } catch (err) {\n      const errorMessage = err.message || 'Token không hợp lệ';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const resetPassword = async ({\n    token,\n    email,\n    newPassword\n  }) => {\n    try {\n      clearError();\n      if (!token || !email || !newPassword) {\n        throw new Error('Thiếu thông tin cần thiết');\n      }\n      if (newPassword.length < 6) {\n        throw new Error('Mật khẩu phải có ít nhất 6 ký tự');\n      }\n      const result = await AuthAPI.resetPassword({\n        token,\n        newPassword\n      });\n      return result;\n    } catch (err) {\n      const errorMessage = err.message || 'Có lỗi xảy ra khi đặt lại mật khẩu';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const value = {\n    isLoggedIn,\n    isGuest,\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    register,\n    enterAsGuest,\n    updateProfile,\n    sendPasswordResetEmail,\n    validateResetToken,\n    resetPassword,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"D2jbGJyHzHJPtE7NU2U8XBOIDp4=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AuthAPI","TokenManager","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isLoggedIn","setIsLoggedIn","isGuest","setIsGuest","user","setUser","loading","setLoading","error","setError","initializeAuth","accessToken","getAccessToken","storedUser","localStorage","getItem","isTokenExpired","profileResult","getProfile","success","data","setItem","JSON","stringify","clearTokens","storedGuest","console","clearError","login","credentials","email","password","result","removeItem","err","errorMessage","message","logout","enterAsGuest","register","userData","firstName","lastName","length","emailRegex","test","updateProfile","updateData","log","changePassword","passwordData","currentPassword","newPassword","requireRelogin","sendPasswordResetEmail","forgotPassword","validateResetToken","token","resetPassword","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/demo app english/FullStackAppWebStudyEnglish/Frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { AuthAPI, TokenManager } from \"../services/api\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [isGuest, setIsGuest] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Initialize auth state from tokens\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      setLoading(true);\r\n      \r\n      try {\r\n        const accessToken = TokenManager.getAccessToken();\r\n        const storedUser = localStorage.getItem('user');\r\n        \r\n        if (accessToken && !TokenManager.isTokenExpired(accessToken) && storedUser) {\r\n          // Token exists and is valid, get fresh profile data\r\n          const profileResult = await AuthAPI.getProfile();\r\n          \r\n          if (profileResult.success) {\r\n            setUser(profileResult.data);\r\n            setIsLoggedIn(true);\r\n            localStorage.setItem('user', JSON.stringify(profileResult.data));\r\n          } else {\r\n            // Token might be invalid, clear everything\r\n            TokenManager.clearTokens();\r\n            setUser(null);\r\n            setIsLoggedIn(false);\r\n          }\r\n        } else {\r\n          // No valid token, check for guest mode\r\n          const storedGuest = localStorage.getItem('isGuest');\r\n          if (storedGuest === 'true') {\r\n            setIsGuest(true);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Auth initialization error:', error);\r\n        TokenManager.clearTokens();\r\n        setUser(null);\r\n        setIsLoggedIn(false);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const clearError = () => setError(null);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      clearError();\r\n      \r\n      if (!credentials || !credentials.email || !credentials.password) {\r\n        throw new Error('Vui lòng điền đầy đủ email và mật khẩu');\r\n      }\r\n\r\n      const result = await AuthAPI.login(credentials);\r\n      \r\n      if (result.success) {\r\n        setIsLoggedIn(true);\r\n        setIsGuest(false);\r\n        setUser(result.data.user);\r\n        localStorage.removeItem('isGuest');\r\n        return { success: true, user: result.data.user };\r\n      } else {\r\n        throw new Error(result.error || 'Đăng nhập thất bại');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err.message || 'Có lỗi xảy ra khi đăng nhập';\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    try {\r\n      clearError();\r\n      AuthAPI.logout(); // This clears tokens\r\n      setIsLoggedIn(false);\r\n      setIsGuest(false);\r\n      setUser(null);\r\n      localStorage.removeItem('isGuest');\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('Error during logout:', err);\r\n      setError('Có lỗi khi đăng xuất');\r\n      return { success: false, error: 'Có lỗi khi đăng xuất' };\r\n    }\r\n  };\r\n\r\n  const enterAsGuest = () => {\r\n    try {\r\n      clearError();\r\n      setIsGuest(true);\r\n      setIsLoggedIn(false);\r\n      setUser(null);\r\n      localStorage.setItem('isGuest', 'true');\r\n      localStorage.removeItem('isLoggedIn');\r\n      localStorage.removeItem('user');\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('Error entering as guest:', err);\r\n      setError('Có lỗi khi vào chế độ khách');\r\n      return { success: false, error: 'Có lỗi khi vào chế độ khách' };\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      clearError();\r\n      \r\n      // Validation\r\n      if (!userData || !userData.email || !userData.password || !userData.firstName || !userData.lastName) {\r\n        throw new Error('Vui lòng điền đầy đủ thông tin');\r\n      }\r\n\r\n      if (userData.password.length < 6) {\r\n        throw new Error('Mật khẩu phải có ít nhất 6 ký tự');\r\n      }\r\n\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!emailRegex.test(userData.email)) {\r\n        throw new Error('Email không hợp lệ');\r\n      }\r\n\r\n      const result = await AuthAPI.register(userData);\r\n      \r\n      if (result.success) {\r\n        return { success: true, message: 'Đăng ký thành công! Vui lòng đăng nhập.' };\r\n      } else {\r\n        throw new Error(result.error || 'Đăng ký thất bại');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err.message || 'Có lỗi xảy ra khi đăng ký';\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (updateData) => {\r\n    try {\r\n      clearError();\r\n      console.log('AuthContext updateProfile called with:', updateData);\r\n      \r\n      // Validation\r\n      if (!updateData || !updateData.firstName || !updateData.lastName) {\r\n        throw new Error('Vui lòng điền đầy đủ thông tin');\r\n      }\r\n\r\n      // Update profile information first\r\n      console.log('Updating profile...');\r\n      const result = await AuthAPI.updateProfile(updateData);\r\n      console.log('Profile update result:', result);\r\n      \r\n      if (result.success) {\r\n        setUser(result.data);\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(result.error || 'Cập nhật thất bại');\r\n      }\r\n    } catch (err) {\r\n      console.error('Update profile error in AuthContext:', err);\r\n      const errorMessage = err.message || 'Có lỗi xảy ra khi cập nhật thông tin';\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  const changePassword = async (passwordData) => {\r\n    try {\r\n      clearError();\r\n      console.log('AuthContext changePassword called');\r\n      \r\n      if (!passwordData.currentPassword || !passwordData.newPassword) {\r\n        throw new Error('Vui lòng điền đầy đủ thông tin mật khẩu');\r\n      }\r\n\r\n      const result = await AuthAPI.changePassword(passwordData);\r\n      console.log('Change password result:', result);\r\n      \r\n      if (result.success) {\r\n        // Password changed successfully, but tokens are now invalid\r\n        // Force logout and redirect to login\r\n        TokenManager.clearTokens();\r\n        setIsLoggedIn(false);\r\n        setUser(null);\r\n        return { \r\n          success: true, \r\n          message: 'Đổi mật khẩu thành công! Vui lòng đăng nhập lại.',\r\n          requireRelogin: true \r\n        };\r\n      } else {\r\n        throw new Error(result.error || 'Không thể đổi mật khẩu');\r\n      }\r\n    } catch (err) {\r\n      console.error('Change password error in AuthContext:', err);\r\n      const errorMessage = err.message || 'Có lỗi xảy ra khi đổi mật khẩu';\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  const sendPasswordResetEmail = async (email) => {\r\n    try {\r\n      clearError();\r\n      console.log('AuthContext sendPasswordResetEmail called with:', email);\r\n      \r\n      if (!email) {\r\n        throw new Error('Vui lòng nhập email');\r\n      }\r\n\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!emailRegex.test(email)) {\r\n        throw new Error('Email không hợp lệ');\r\n      }\r\n\r\n      console.log('Calling AuthAPI.forgotPassword...');\r\n      const result = await AuthAPI.forgotPassword(email);\r\n      console.log('Forgot password result:', result);\r\n      return result;\r\n    } catch (err) {\r\n      console.error('Send password reset email error in AuthContext:', err);\r\n      const errorMessage = err.message || 'Có lỗi xảy ra khi gửi email';\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  const validateResetToken = async (token, email) => {\r\n    try {\r\n      clearError();\r\n      \r\n      if (!token || !email) {\r\n        throw new Error('Token hoặc email không hợp lệ');\r\n      }\r\n\r\n      // For now, we'll just return success\r\n      // Backend will validate when actually resetting password\r\n      return { success: true };\r\n    } catch (err) {\r\n      const errorMessage = err.message || 'Token không hợp lệ';\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  const resetPassword = async ({ token, email, newPassword }) => {\r\n    try {\r\n      clearError();\r\n      \r\n      if (!token || !email || !newPassword) {\r\n        throw new Error('Thiếu thông tin cần thiết');\r\n      }\r\n\r\n      if (newPassword.length < 6) {\r\n        throw new Error('Mật khẩu phải có ít nhất 6 ký tự');\r\n      }\r\n\r\n      const result = await AuthAPI.resetPassword({\r\n        token,\r\n        newPassword\r\n      });\r\n\r\n      return result;\r\n    } catch (err) {\r\n      const errorMessage = err.message || 'Có lỗi xảy ra khi đặt lại mật khẩu';\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    isLoggedIn,\r\n    isGuest,\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    logout,\r\n    register,\r\n    enterAsGuest,\r\n    updateProfile,\r\n    sendPasswordResetEmail,\r\n    validateResetToken,\r\n    resetPassword,\r\n    clearError\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,OAAO,EAAEC,YAAY,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMS,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGV,UAAU,CAACO,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACkB,IAAI,EAAEC,OAAO,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMuB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjCH,UAAU,CAAC,IAAI,CAAC;MAEhB,IAAI;QACF,MAAMI,WAAW,GAAGtB,YAAY,CAACuB,cAAc,CAAC,CAAC;QACjD,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;QAE/C,IAAIJ,WAAW,IAAI,CAACtB,YAAY,CAAC2B,cAAc,CAACL,WAAW,CAAC,IAAIE,UAAU,EAAE;UAC1E;UACA,MAAMI,aAAa,GAAG,MAAM7B,OAAO,CAAC8B,UAAU,CAAC,CAAC;UAEhD,IAAID,aAAa,CAACE,OAAO,EAAE;YACzBd,OAAO,CAACY,aAAa,CAACG,IAAI,CAAC;YAC3BnB,aAAa,CAAC,IAAI,CAAC;YACnBa,YAAY,CAACO,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,aAAa,CAACG,IAAI,CAAC,CAAC;UAClE,CAAC,MAAM;YACL;YACA/B,YAAY,CAACmC,WAAW,CAAC,CAAC;YAC1BnB,OAAO,CAAC,IAAI,CAAC;YACbJ,aAAa,CAAC,KAAK,CAAC;UACtB;QACF,CAAC,MAAM;UACL;UACA,MAAMwB,WAAW,GAAGX,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;UACnD,IAAIU,WAAW,KAAK,MAAM,EAAE;YAC1BtB,UAAU,CAAC,IAAI,CAAC;UAClB;QACF;MACF,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdkB,OAAO,CAAClB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDnB,YAAY,CAACmC,WAAW,CAAC,CAAC;QAC1BnB,OAAO,CAAC,IAAI,CAAC;QACbJ,aAAa,CAAC,KAAK,CAAC;MACtB,CAAC,SAAS;QACRM,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMiB,UAAU,GAAGA,CAAA,KAAMlB,QAAQ,CAAC,IAAI,CAAC;EAEvC,MAAMmB,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnC,IAAI;MACFF,UAAU,CAAC,CAAC;MAEZ,IAAI,CAACE,WAAW,IAAI,CAACA,WAAW,CAACC,KAAK,IAAI,CAACD,WAAW,CAACE,QAAQ,EAAE;QAC/D,MAAM,IAAInC,KAAK,CAAC,wCAAwC,CAAC;MAC3D;MAEA,MAAMoC,MAAM,GAAG,MAAM5C,OAAO,CAACwC,KAAK,CAACC,WAAW,CAAC;MAE/C,IAAIG,MAAM,CAACb,OAAO,EAAE;QAClBlB,aAAa,CAAC,IAAI,CAAC;QACnBE,UAAU,CAAC,KAAK,CAAC;QACjBE,OAAO,CAAC2B,MAAM,CAACZ,IAAI,CAAChB,IAAI,CAAC;QACzBU,YAAY,CAACmB,UAAU,CAAC,SAAS,CAAC;QAClC,OAAO;UAAEd,OAAO,EAAE,IAAI;UAAEf,IAAI,EAAE4B,MAAM,CAACZ,IAAI,CAAChB;QAAK,CAAC;MAClD,CAAC,MAAM;QACL,MAAM,IAAIR,KAAK,CAACoC,MAAM,CAACxB,KAAK,IAAI,oBAAoB,CAAC;MACvD;IACF,CAAC,CAAC,OAAO0B,GAAG,EAAE;MACZ,MAAMC,YAAY,GAAGD,GAAG,CAACE,OAAO,IAAI,6BAA6B;MACjE3B,QAAQ,CAAC0B,YAAY,CAAC;MACtB,OAAO;QAAEhB,OAAO,EAAE,KAAK;QAAEX,KAAK,EAAE2B;MAAa,CAAC;IAChD;EACF,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnB,IAAI;MACFV,UAAU,CAAC,CAAC;MACZvC,OAAO,CAACiD,MAAM,CAAC,CAAC,CAAC,CAAC;MAClBpC,aAAa,CAAC,KAAK,CAAC;MACpBE,UAAU,CAAC,KAAK,CAAC;MACjBE,OAAO,CAAC,IAAI,CAAC;MACbS,YAAY,CAACmB,UAAU,CAAC,SAAS,CAAC;MAElC,OAAO;QAAEd,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOe,GAAG,EAAE;MACZR,OAAO,CAAClB,KAAK,CAAC,sBAAsB,EAAE0B,GAAG,CAAC;MAC1CzB,QAAQ,CAAC,sBAAsB,CAAC;MAChC,OAAO;QAAEU,OAAO,EAAE,KAAK;QAAEX,KAAK,EAAE;MAAuB,CAAC;IAC1D;EACF,CAAC;EAED,MAAM8B,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAI;MACFX,UAAU,CAAC,CAAC;MACZxB,UAAU,CAAC,IAAI,CAAC;MAChBF,aAAa,CAAC,KAAK,CAAC;MACpBI,OAAO,CAAC,IAAI,CAAC;MACbS,YAAY,CAACO,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC;MACvCP,YAAY,CAACmB,UAAU,CAAC,YAAY,CAAC;MACrCnB,YAAY,CAACmB,UAAU,CAAC,MAAM,CAAC;MAE/B,OAAO;QAAEd,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOe,GAAG,EAAE;MACZR,OAAO,CAAClB,KAAK,CAAC,0BAA0B,EAAE0B,GAAG,CAAC;MAC9CzB,QAAQ,CAAC,6BAA6B,CAAC;MACvC,OAAO;QAAEU,OAAO,EAAE,KAAK;QAAEX,KAAK,EAAE;MAA8B,CAAC;IACjE;EACF,CAAC;EAED,MAAM+B,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC,IAAI;MACFb,UAAU,CAAC,CAAC;;MAEZ;MACA,IAAI,CAACa,QAAQ,IAAI,CAACA,QAAQ,CAACV,KAAK,IAAI,CAACU,QAAQ,CAACT,QAAQ,IAAI,CAACS,QAAQ,CAACC,SAAS,IAAI,CAACD,QAAQ,CAACE,QAAQ,EAAE;QACnG,MAAM,IAAI9C,KAAK,CAAC,gCAAgC,CAAC;MACnD;MAEA,IAAI4C,QAAQ,CAACT,QAAQ,CAACY,MAAM,GAAG,CAAC,EAAE;QAChC,MAAM,IAAI/C,KAAK,CAAC,kCAAkC,CAAC;MACrD;MAEA,MAAMgD,UAAU,GAAG,4BAA4B;MAC/C,IAAI,CAACA,UAAU,CAACC,IAAI,CAACL,QAAQ,CAACV,KAAK,CAAC,EAAE;QACpC,MAAM,IAAIlC,KAAK,CAAC,oBAAoB,CAAC;MACvC;MAEA,MAAMoC,MAAM,GAAG,MAAM5C,OAAO,CAACmD,QAAQ,CAACC,QAAQ,CAAC;MAE/C,IAAIR,MAAM,CAACb,OAAO,EAAE;QAClB,OAAO;UAAEA,OAAO,EAAE,IAAI;UAAEiB,OAAO,EAAE;QAA0C,CAAC;MAC9E,CAAC,MAAM;QACL,MAAM,IAAIxC,KAAK,CAACoC,MAAM,CAACxB,KAAK,IAAI,kBAAkB,CAAC;MACrD;IACF,CAAC,CAAC,OAAO0B,GAAG,EAAE;MACZ,MAAMC,YAAY,GAAGD,GAAG,CAACE,OAAO,IAAI,2BAA2B;MAC/D3B,QAAQ,CAAC0B,YAAY,CAAC;MACtB,OAAO;QAAEhB,OAAO,EAAE,KAAK;QAAEX,KAAK,EAAE2B;MAAa,CAAC;IAChD;EACF,CAAC;EAED,MAAMW,aAAa,GAAG,MAAOC,UAAU,IAAK;IAC1C,IAAI;MACFpB,UAAU,CAAC,CAAC;MACZD,OAAO,CAACsB,GAAG,CAAC,wCAAwC,EAAED,UAAU,CAAC;;MAEjE;MACA,IAAI,CAACA,UAAU,IAAI,CAACA,UAAU,CAACN,SAAS,IAAI,CAACM,UAAU,CAACL,QAAQ,EAAE;QAChE,MAAM,IAAI9C,KAAK,CAAC,gCAAgC,CAAC;MACnD;;MAEA;MACA8B,OAAO,CAACsB,GAAG,CAAC,qBAAqB,CAAC;MAClC,MAAMhB,MAAM,GAAG,MAAM5C,OAAO,CAAC0D,aAAa,CAACC,UAAU,CAAC;MACtDrB,OAAO,CAACsB,GAAG,CAAC,wBAAwB,EAAEhB,MAAM,CAAC;MAE7C,IAAIA,MAAM,CAACb,OAAO,EAAE;QAClBd,OAAO,CAAC2B,MAAM,CAACZ,IAAI,CAAC;QACpB,OAAO;UAAED,OAAO,EAAE;QAAK,CAAC;MAC1B,CAAC,MAAM;QACL,MAAM,IAAIvB,KAAK,CAACoC,MAAM,CAACxB,KAAK,IAAI,mBAAmB,CAAC;MACtD;IACF,CAAC,CAAC,OAAO0B,GAAG,EAAE;MACZR,OAAO,CAAClB,KAAK,CAAC,sCAAsC,EAAE0B,GAAG,CAAC;MAC1D,MAAMC,YAAY,GAAGD,GAAG,CAACE,OAAO,IAAI,sCAAsC;MAC1E3B,QAAQ,CAAC0B,YAAY,CAAC;MACtB,OAAO;QAAEhB,OAAO,EAAE,KAAK;QAAEX,KAAK,EAAE2B;MAAa,CAAC;IAChD;EACF,CAAC;EAED,MAAMc,cAAc,GAAG,MAAOC,YAAY,IAAK;IAC7C,IAAI;MACFvB,UAAU,CAAC,CAAC;MACZD,OAAO,CAACsB,GAAG,CAAC,mCAAmC,CAAC;MAEhD,IAAI,CAACE,YAAY,CAACC,eAAe,IAAI,CAACD,YAAY,CAACE,WAAW,EAAE;QAC9D,MAAM,IAAIxD,KAAK,CAAC,yCAAyC,CAAC;MAC5D;MAEA,MAAMoC,MAAM,GAAG,MAAM5C,OAAO,CAAC6D,cAAc,CAACC,YAAY,CAAC;MACzDxB,OAAO,CAACsB,GAAG,CAAC,yBAAyB,EAAEhB,MAAM,CAAC;MAE9C,IAAIA,MAAM,CAACb,OAAO,EAAE;QAClB;QACA;QACA9B,YAAY,CAACmC,WAAW,CAAC,CAAC;QAC1BvB,aAAa,CAAC,KAAK,CAAC;QACpBI,OAAO,CAAC,IAAI,CAAC;QACb,OAAO;UACLc,OAAO,EAAE,IAAI;UACbiB,OAAO,EAAE,kDAAkD;UAC3DiB,cAAc,EAAE;QAClB,CAAC;MACH,CAAC,MAAM;QACL,MAAM,IAAIzD,KAAK,CAACoC,MAAM,CAACxB,KAAK,IAAI,wBAAwB,CAAC;MAC3D;IACF,CAAC,CAAC,OAAO0B,GAAG,EAAE;MACZR,OAAO,CAAClB,KAAK,CAAC,uCAAuC,EAAE0B,GAAG,CAAC;MAC3D,MAAMC,YAAY,GAAGD,GAAG,CAACE,OAAO,IAAI,gCAAgC;MACpE3B,QAAQ,CAAC0B,YAAY,CAAC;MACtB,OAAO;QAAEhB,OAAO,EAAE,KAAK;QAAEX,KAAK,EAAE2B;MAAa,CAAC;IAChD;EACF,CAAC;EAED,MAAMmB,sBAAsB,GAAG,MAAOxB,KAAK,IAAK;IAC9C,IAAI;MACFH,UAAU,CAAC,CAAC;MACZD,OAAO,CAACsB,GAAG,CAAC,iDAAiD,EAAElB,KAAK,CAAC;MAErE,IAAI,CAACA,KAAK,EAAE;QACV,MAAM,IAAIlC,KAAK,CAAC,qBAAqB,CAAC;MACxC;MAEA,MAAMgD,UAAU,GAAG,4BAA4B;MAC/C,IAAI,CAACA,UAAU,CAACC,IAAI,CAACf,KAAK,CAAC,EAAE;QAC3B,MAAM,IAAIlC,KAAK,CAAC,oBAAoB,CAAC;MACvC;MAEA8B,OAAO,CAACsB,GAAG,CAAC,mCAAmC,CAAC;MAChD,MAAMhB,MAAM,GAAG,MAAM5C,OAAO,CAACmE,cAAc,CAACzB,KAAK,CAAC;MAClDJ,OAAO,CAACsB,GAAG,CAAC,yBAAyB,EAAEhB,MAAM,CAAC;MAC9C,OAAOA,MAAM;IACf,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZR,OAAO,CAAClB,KAAK,CAAC,iDAAiD,EAAE0B,GAAG,CAAC;MACrE,MAAMC,YAAY,GAAGD,GAAG,CAACE,OAAO,IAAI,6BAA6B;MACjE3B,QAAQ,CAAC0B,YAAY,CAAC;MACtB,OAAO;QAAEhB,OAAO,EAAE,KAAK;QAAEX,KAAK,EAAE2B;MAAa,CAAC;IAChD;EACF,CAAC;EAED,MAAMqB,kBAAkB,GAAG,MAAAA,CAAOC,KAAK,EAAE3B,KAAK,KAAK;IACjD,IAAI;MACFH,UAAU,CAAC,CAAC;MAEZ,IAAI,CAAC8B,KAAK,IAAI,CAAC3B,KAAK,EAAE;QACpB,MAAM,IAAIlC,KAAK,CAAC,+BAA+B,CAAC;MAClD;;MAEA;MACA;MACA,OAAO;QAAEuB,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOe,GAAG,EAAE;MACZ,MAAMC,YAAY,GAAGD,GAAG,CAACE,OAAO,IAAI,oBAAoB;MACxD3B,QAAQ,CAAC0B,YAAY,CAAC;MACtB,OAAO;QAAEhB,OAAO,EAAE,KAAK;QAAEX,KAAK,EAAE2B;MAAa,CAAC;IAChD;EACF,CAAC;EAED,MAAMuB,aAAa,GAAG,MAAAA,CAAO;IAAED,KAAK;IAAE3B,KAAK;IAAEsB;EAAY,CAAC,KAAK;IAC7D,IAAI;MACFzB,UAAU,CAAC,CAAC;MAEZ,IAAI,CAAC8B,KAAK,IAAI,CAAC3B,KAAK,IAAI,CAACsB,WAAW,EAAE;QACpC,MAAM,IAAIxD,KAAK,CAAC,2BAA2B,CAAC;MAC9C;MAEA,IAAIwD,WAAW,CAACT,MAAM,GAAG,CAAC,EAAE;QAC1B,MAAM,IAAI/C,KAAK,CAAC,kCAAkC,CAAC;MACrD;MAEA,MAAMoC,MAAM,GAAG,MAAM5C,OAAO,CAACsE,aAAa,CAAC;QACzCD,KAAK;QACLL;MACF,CAAC,CAAC;MAEF,OAAOpB,MAAM;IACf,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ,MAAMC,YAAY,GAAGD,GAAG,CAACE,OAAO,IAAI,oCAAoC;MACxE3B,QAAQ,CAAC0B,YAAY,CAAC;MACtB,OAAO;QAAEhB,OAAO,EAAE,KAAK;QAAEX,KAAK,EAAE2B;MAAa,CAAC;IAChD;EACF,CAAC;EAED,MAAMwB,KAAK,GAAG;IACZ3D,UAAU;IACVE,OAAO;IACPE,IAAI;IACJE,OAAO;IACPE,KAAK;IACLoB,KAAK;IACLS,MAAM;IACNE,QAAQ;IACRD,YAAY;IACZQ,aAAa;IACbQ,sBAAsB;IACtBE,kBAAkB;IAClBE,aAAa;IACb/B;EACF,CAAC;EAED,oBACEpC,OAAA,CAACC,WAAW,CAACoE,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA7D,QAAA,EAChCA;EAAQ;IAAA+D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjE,GAAA,CA3SWF,YAAY;AAAAoE,EAAA,GAAZpE,YAAY;AAAA,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}