import React, { useState } from "react";
import "./ForgotPasswordScreen.css";
import { Link, useNavigate } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
import { images } from "../assets/images";
import { Cloud } from "../components";

const ForgotPasswordScreen = () => {
  const [email, setEmail] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isEmailSent, setIsEmailSent] = useState(false);
  const [localError, setLocalError] = useState("");
  
  const navigate = useNavigate();
  const { sendPasswordResetEmail, error, clearError } = useAuth();

  const handleChange = (e) => {
    if (error) clearError();
    if (localError) setLocalError("");
    setEmail(e.target.value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setLocalError("");
    
    try {
      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        setLocalError("Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ email h·ª£p l·ªá!");
        setIsLoading(false);
        return;
      }

      // Send password reset email
      const result = await sendPasswordResetEmail(email);
      
      if (result.success) {
        // Navigate to OTP verification screen
        navigate("/otp-verification", { 
          state: { email: email } 
        });
      }
    } catch (err) {
      console.error('Forgot password error:', err);
      setLocalError("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendEmail = async () => {
    setIsLoading(true);
    try {
      const result = await sendPasswordResetEmail(email);
      if (result.success) {
        console.log('Password reset email resent to:', email);
      }
    } catch (err) {
      console.error('Resend email error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="forgot-password-container">
      {/* Clouds decorations */}
      <Cloud src={images.cloud1} position="top-left" />
      <Cloud src={images.cloud2} position="top-right" />
      <Cloud src={images.cloud3} position="bottom-right" />
      
      <button 
        className="back-button" 
        onClick={() => navigate("/login")}
        aria-label="Quay l·∫°i"
      />

      <div className="forgot-password-form">
        {!isEmailSent ? (
          <>
            <div className="form-header">
              <div className="icon-container">
                <div className="forgot-icon">üîí</div>
              </div>
              <h2>Qu√™n m·∫≠t kh·∫©u?</h2>
              <p className="form-description">
                ƒê·ª´ng lo l·∫Øng! H√£y nh·∫≠p email c·ªßa b·∫°n v√† ch√∫ng t√¥i s·∫Ω g·ª≠i 
                h∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho b·∫°n.
              </p>
            </div>
            
            {(error || localError) && (
              <div className="error-message">
                {error || localError}
              </div>
            )}
            
            <form onSubmit={handleSubmit}>
              <div className="input-group">
                <label htmlFor="email">ƒê·ªãa ch·ªâ email</label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={email}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p email c·ªßa b·∫°n"
                  required
                  disabled={isLoading}
                />
              </div>
              
              <button 
                type="submit" 
                disabled={isLoading || !email.trim()}
                className={`submit-btn ${isLoading ? 'loading' : ''}`}
              >
                {isLoading ? (
                  <>
                    <span className="loading-spinner"></span>
                    ƒêang g·ª≠i...
                  </>
                ) : (
                  'G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u'
                )}
              </button>
            </form>
          </>
        ) : (
          <>
            <div className="form-header success">
              <div className="icon-container">
                <div className="success-icon">üìß</div>
              </div>
              <h2>Email ƒë√£ ƒë∆∞·ª£c g·ª≠i!</h2>
              <p className="form-description">
                Ch√∫ng t√¥i ƒë√£ g·ª≠i h∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn email:
              </p>
              <div className="email-display">{email}</div>
              <p className="instruction-text">
                Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ ƒë·∫øn (v√† c·∫£ th∆∞ m·ª•c spam) c·ªßa b·∫°n. 
                Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u s·∫Ω h·∫øt h·∫°n sau 15 ph√∫t.
              </p>
            </div>

            <div className="action-buttons">
              <button 
                className="resend-btn"
                onClick={handleResendEmail}
                disabled={isLoading}
              >
                {isLoading ? 'ƒêang g·ª≠i l·∫°i...' : 'G·ª≠i l·∫°i email'}
              </button>
              
              <button 
                className="back-to-login-btn"
                onClick={() => navigate("/login")}
              >
                Quay l·∫°i ƒëƒÉng nh·∫≠p
              </button>
            </div>
          </>
        )}

        <div className="form-footer">
          <p>
            Nh·ªõ m·∫≠t kh·∫©u r·ªìi? <Link to="/login">ƒêƒÉng nh·∫≠p ngay</Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default ForgotPasswordScreen;